28 - double check the logic with eric.

30 - you have a thing that stems words, but not quite sure how to read the differences. Also generally would be helpful to review the stemming stuff.

matching regex - if i want to match a word ending, say, is there a way to do it that doesn't also catch the spaces? So like this:

ian\s

That matches the space too. Is there a way that you can show what you want to return as match exclusive of the space? Is the only way to tokenize and then regex?

attempt to match all non-first character instances of this
(?<!$)[aeiouyhw]

41.py

piece of 39 in comments

42 - what is a word offset? generally - what is it asking me to do with the semantic index there?

43 - to do what is a spearman correlation? explain that a bit?
44 - to do 

in the librivox scraper - it looks like the enqueing starts over by page numbers - so if it crashes in the middle of a topic on page five, it redoes pages 1-4. duplicate posts?

this is the one where it started over - https://forum.librivox.org/viewtopic.php?f=16&t=52609&start=75

error from librivox - urllib.error.URLError: <urlopen error EOF occurred in violation of protocol (_ssl.c:600)> for DOWNLOAD https://forum.librivox.org/viewtopic.php?f=16&t=10080&start=120

"In particular, the "value" of a structured object such as a list is actually just a reference to the object." Is that true for a standard variable as well? like a string? are variables always just references? or is that just for structured objects?


 	
>>> nested = [[]] * 3
>>> nested[1].append('Python')
>>> nested[1] = ['Monty']
>>> nested
[['Python'], ['Monty'], ['Python']]
We began with a list containing three references to a single empty list object. Then we modified that object by appending 'Python' to it, resulting in a list containing three references to a single list object ['Python']. Next, we overwrote one of those references with a reference to a new object ['Monty']. This last step modified one of the three object references inside the nested list. However, the ['Python'] object wasn't changed, and is still referenced from two places in our nested list of lists. It is crucial to appreciate this difference between modifying an object via an object reference, and overwriting an object reference.

-------so modifying an object via an object reference is when you change the underlying thing that it's referencing. overwriting an object is when you just change the top level.

for 42 in chapter 3 - i have a thing that produces offsets for each word in a text. the next step would be to extend the concordance so that when you query a word it showsâ€¦what? the synonyms? Or should it just show a list of numbers? Right now it's not queryable at all